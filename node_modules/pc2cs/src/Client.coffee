require "isf" # Making sure it's there

# A Client class to store the socket object, and connections with other clients
class Client extends IS.Object

	# Upon creating a new client connection, the socket is stored for a lot more stuff
	constructor: (@socket) ->
		@id = @socket.id
		@socket.emit "auth", @id
		@connections = []
		@socket.on "data", @spread
		@socket.on "log", @log
		console.log "Connected client ID : #{@id}"
	
	# Log the data received
	log: (args...) => console.log "Client #{@id} sais : ", args

	# Spread the data received from the client
	spread: (event, data...) =>
		beenHere = [ @id ]
		data.unshift event
		data.unshift "data"
		@publish "data", event, data, beenHere

	# Send data to the client
	send: (event, data, beenHere) =>
		return null if @id in beenHere
		beenHere.push @id
		data.push "fromserver"
		console.log data
		@socket.emit.apply @socket, data

	# Connect another client to this one
	connect: (client, first = true) =>
		id = @delegateEvent "data", client.send, client
		@connections[id] = client.id
		@socket.emit "connectedTo", client.id
		client.connect @, false if first

	disconnect: (client) =>
		@unsubscribe "data", @connections.indexOf client
		@connections.splice ( @connections.indexOf client ), 0

	disconnected: =>
		for connection in @connections
			if connection.disconnect? then connection.disconnect @



	# Getting the observer done
	@include IS.Modules.Observer

module.exports = Client
