class Client extends IS.Object

	constructor: () ->
		@online = false
		script = document.createElement "script"
		script.src = "/socket.io/socket.io.js"
		window.Client = @
		handle = =>
			@socket = io.connect "#{window.location.protocol}//#{window.location.host}"
			@socket.on "auth", (@id) =>
				@online = true
				console.log "Connected! ID: #{@id}"
				me = @
				for ev, handler of @_baseEvents
					@socket.on ev, (args...) => handler.apply me, args
				@socket.on "data", @dataReceived
				do @loadEvents
				do @init if @init?
		if require? and require("socket.io")? then window.io = require("socket.io"); do handle
		else
			script.onload = handle
			document.head.appendChild script

	_baseEvents:
		"error": (e) -> throw ClientErrorReporter.generate e
		"connectedTo": (id) ->
			console.log "Connected to #{id}"
			@connected id if @connected?

	events: null
	log: (args...) => args.unshift "log"; @socket?.emit.apply @socket, args
	loadEvents: =>
		for event, handler of @events then do (event, handler) =>
			@subscribe event, (args...) =>
				test = do args.pop
				isntfromserver = test isnt "fromserver"
				if isntfromserver then args.push test
				handler.apply @, args
				if isntfromserver
					args.unshift event
					args.unshift "data"
					@socket?.emit.apply @socket, args
		@events = null

	dataReceived: (event, data...) =>
		data.unshift event
		@publish.apply @, data

	connect: (id) => @socket.emit "connectTo", id

	@include IS.Modules.Observer

class ClientErrorReporter extends IS.Object

	@errors:
		"ConnectionError": [
			"The client requested does not exist"
		]

	@extend IS.ErrorReporter


window.BaseClient = Client
