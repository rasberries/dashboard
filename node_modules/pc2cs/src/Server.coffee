require "isf"	# We will need the ISF Framework, for Observer and ErrorReporter

# The class that does all the work. It can start off with a basic http server, or hooked to another Express server (when included in another app)
# Also, if it's attached to another server, the latter must have a directive which allows the inclusion of the PC2CS client.
# @mixin IS.Object
class PrivateClient2ClientServer extends IS.Object

	# Bootstrapping the application around an http server
	constructor: (@server, compile = false, @httpServer = null) ->
		@server                    = do (require "http").createServer if not @server?
		io                         = require "socket.io"
		@app                       = io.listen ( @httpServer or @server )
		@compileClientSource       = => (require "coffee-script").compile (require "fs").readFileSync ( (require "path").resolve "#{__dirname}/ClientClient.coffee" ), "utf-8"
		@clientSource              = do @compileClientSource if not compile
		@clients                   = {}

		@app.sockets.on "connection", (sock) ->
			client = new ( require require("path").resolve "#{__dirname}/Client" ) sock
			client.socket.on "connectTo",  (cli) =>
				return client.socket.emit "error", 0 if not @clients[cli]
				console.log "Connecting #{client.id} to #{cli}"
				client.connect @clients[cli]
			@clients[client.id] = client

		@app.sockets.on "disconnect", (sock) -> do client.disconncted; delete @clients.indexOf client

		@server.get "/pc2cs.js", (req, res) =>
			if compile then res.send do @compileClientSource, {"Content-Type": "application/javascript"}, 201
			else res.send @clientSource, {"Content-Type": "application/javascript"}, 201
	
	
module.exports = PrivateClient2ClientServer
